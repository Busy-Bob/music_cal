 
`timescale 1 ps/ 1 ps
module debug_vlg_tst();
// constants                                           
// general purpose registers
//reg eachvec;
// test vector input registers
reg clk;
reg control;
reg key;
reg music;
reg reset;
reg [3:0] value;
// wires                                               
wire less;
wire music_on;
wire neg;
wire [2:0]  off_number;
wire [1:0]  state;
wire zero;

// assign statements (if any)                          
debug i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.control(control),
	.key(key),
	.less(less),
	.music(music),
	.music_on(music_on),
	.neg(neg),
	.off_number(off_number),
	.reset(reset),
	.state(state),
	.value(value),
	.zero(zero)
);
initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin                          
#0 clk = 1; control = 0; music = 0; reset = 1;
#1  value = 4'h1;
#0  key = 1;
#40  key = 0;  
#280  value = 4'h7;
#0  key = 1;
#40  key = 0;  
#280  value = 4'hA;
#0  key = 1;
#40   key = 0;  
#280  value = 4'h3;
#0  key = 1;
#40   key = 0;    
#280  value = 4'h8;
#0  key = 1;
#40  key = 0;  
#280  value = 4'hC;
#0  key = 1;
#40   key = 0;  
#280  value = 4'h4;
#0  key = 1;
#40   key = 0; 
#280  value = 4'h9;
#0  key = 1;
#40   key = 0;
#280  value = 4'hD;
#0  key = 1;
#40   key = 0;  
#280  value = 4'h8;
#0  key = 1;
#40   key = 0; 
#280  value = 4'h3;
#0  key = 1;
#40   key = 0; 
#280  value = 4'hB;
#0  key = 1;
#40   key = 0;  
#280  value = 4'h4;
#0  key = 1;
#40   key = 0; 
#280  value = 4'h6;
#0  key = 1;
#40   key = 0; 
#280  value = 4'hE;
#0  key = 1;
#40   key = 0;  
#280  value = 4'h2;
#0  key = 1;
#40   key = 0; 
#280  value = 4'h4;
#0  key = 1;
#40   key = 0; 
#160  value = 4'hF;
#0  key = 1;
#40   key = 0; 
                                                
// --> end                                             
//$display("Running testbench");                       
end                                                    
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
#20 clk = ~clk;                                                      
//@eachvec;                                              
// --> end                                             
end                                                    
endmodule

