// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "06/30/2017 23:20:56"
                                                                                
// Verilog Test Bench template for design : music_cal
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ps/ 1 ps
module music_cal_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg CLK;
reg control;
reg music_on;
reg RESET;
reg [3:0] ROW;
// wires                                               
wire CARRY_OUT;
wire [3:0]  CHOICE;
wire [3:0]  COL;
wire LESS_THAN;
wire music;
wire NEG_ANS;
wire [7:0]  SEG;
wire [1:0]  state;
wire [1:0]  state2;
wire ZERO;

// assign statements (if any)                          
music_cal i1 (
// port map - connection between master ports and signals/registers   
	.CARRY_OUT(CARRY_OUT),
	.CHOICE(CHOICE),
	.CLK(CLK),
	.COL(COL),
	.control(control),
	.LESS_THAN(LESS_THAN),
	.music(music),
	.music_on(music_on),
	.NEG_ANS(NEG_ANS),
	.RESET(RESET),
	.ROW(ROW),
	.SEG(SEG),
	.state(state),
	.state2(state2),
	.ZERO(ZERO)
);
initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin                          
                                                       
// --> end                                             
$display("Running testbench");                       
end                                                    
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
                                                       
@eachvec;                                              
// --> end                                             
end                                                    
endmodule

